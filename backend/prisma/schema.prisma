generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  painter      Painter?
  customer     Customer?
}

model Painter {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  experience  Int      @default(0)
  rating      Decimal  @default(0.0)
  specialties String[]
  phone       String?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  availability Availability[]
  bookings     Booking[]
}

model Customer {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookings  Booking[]
}

model Availability {
  id        String   @id @default(uuid())
  painterId String
  painter   Painter  @relation(fields: [painterId], references: [id], onDelete: Cascade)
  startTime DateTime
  endTime   DateTime
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking?
}

model Booking {
  id             String   @id @default(uuid())
  customerId     String
  customer       Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  painterId      String
  painter        Painter   @relation(fields: [painterId], references: [id], onDelete: Cascade)
  availabilityId String   @unique
  availability   Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  startTime      DateTime
  endTime        DateTime
  status         BookingStatus @default(confirmed)
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum Role {
  painter
  customer
}

enum BookingStatus {
  pending
  confirmed
  cancelled
  completed
}


